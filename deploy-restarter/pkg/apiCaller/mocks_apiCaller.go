// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apiCaller/apiCaller.go

// Package mocks_apiCaller is a generated GoMock package.
package apiCaller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
)

// MockRestInterface is a mock of RestInterface interface.
type MockRestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestInterfaceMockRecorder
}

// MockRestInterfaceMockRecorder is the mock recorder for MockRestInterface.
type MockRestInterfaceMockRecorder struct {
	mock *MockRestInterface
}

// NewMockRestInterface creates a new mock instance.
func NewMockRestInterface(ctrl *gomock.Controller) *MockRestInterface {
	mock := &MockRestInterface{ctrl: ctrl}
	mock.recorder = &MockRestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestInterface) EXPECT() *MockRestInterfaceMockRecorder {
	return m.recorder
}

// InClusterConfig mocks base method.
func (m *MockRestInterface) InClusterConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InClusterConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InClusterConfig indicates an expected call of InClusterConfig.
func (mr *MockRestInterfaceMockRecorder) InClusterConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InClusterConfig", reflect.TypeOf((*MockRestInterface)(nil).InClusterConfig))
}

// MockKubernetesInterface is a mock of KubernetesInterface interface.
type MockKubernetesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesInterfaceMockRecorder
}

// MockKubernetesInterfaceMockRecorder is the mock recorder for MockKubernetesInterface.
type MockKubernetesInterfaceMockRecorder struct {
	mock *MockKubernetesInterface
}

// NewMockKubernetesInterface creates a new mock instance.
func NewMockKubernetesInterface(ctrl *gomock.Controller) *MockKubernetesInterface {
	mock := &MockKubernetesInterface{ctrl: ctrl}
	mock.recorder = &MockKubernetesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesInterface) EXPECT() *MockKubernetesInterfaceMockRecorder {
	return m.recorder
}

// NewForConfig mocks base method.
func (m *MockKubernetesInterface) NewForConfig(c *rest.Config) (*kubernetes.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewForConfig", c)
	ret0, _ := ret[0].(*kubernetes.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewForConfig indicates an expected call of NewForConfig.
func (mr *MockKubernetesInterfaceMockRecorder) NewForConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewForConfig", reflect.TypeOf((*MockKubernetesInterface)(nil).NewForConfig), c)
}
