pipeline {
     agent {
        dockerfile {
           label 'dockerinside'
        }
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        HOME="."
        GHE_USERNAME = credentials("GHE_USERNAME")
        GHE_TOKEN = credentials("GHE_TOKEN")
        ARM_CLIENT_ID = credentials("ARM_CLIENT_ID")
        ARM_CLIENT_SECRET = credentials("ARM_CLIENT_SECRET")
        ARM_SUBSCRIPTION_ID = credentials("ARM_SUBSCRIPTION_ID")
        ARM_TENANT_ID = credentials("ARM_TENANT_ID")
        GOCACHE="/tmp/.gocache"
    }

    stages {
        
        stage ('build') {
            steps {
                sh "go build ."
            }
        }

        stage ('test') {
            steps {
                sh "go test -v ./... -cover  -coverpkg=./... -coverprofile=coverage.out"
                
                // convert coverage report to cobertura format and report it in jenkins
                sh "go get github.com/axw/gocov/..."
                sh "go get github.com/AlekSi/gocov-xml"
                sh "gocov convert coverage.out | gocov-xml > coverage.xml"
                cobertura coberturaReportFile: 'coverage.xml'
            }
        }
        
        stage ('Determine new version tag') {
            when {
                branch "master"
            }
            steps {
                script {
                    sh "git config --local credential.helper '!f() { echo username=\\$GHE_USERNAME; echo password=\\$GHE_TOKEN; }; f'"
                    sh "git fetch --tags"
                    env.LATEST_REVISION = sh(returnStdout: true, script: "git rev-list --tags --max-count=1").trim()
                    env.YAMLIT_LATEST_TAG = sh(returnStdout: true, script: "git describe --tags ${env.LATEST_REVISION}").trim()
                    env.YAMLIT_LATEST_VERSION = sh(returnStdout: true, script: "go run main.go version | cut -d ' ' -f2").trim()
                    env.IS_NEW_VERSION = sh(returnStdout: true, script: "[ \"${env.YAMLIT_LATEST_TAG}\" != \"${env.YAMLIT_LATEST_VERSION}\" ] && echo 'YES' || echo 'NO'").trim()
                }
            }
        }
        stage ('Update git version tag') {
            when {
                branch "master"
                environment name: "IS_NEW_VERSION", value: "YES"
            }

            steps {
                sh """
                    git config user.email "ci-user@noreply.aa.com"
                    git config user.name "jenkins"
                    git tag -a "${env.YAMLIT_LATEST_VERSION}" \
                        -m "Generated by: ${env.JENKINS_URL}" \
                        -m "Job: ${env.JOB_NAME}" \
                        -m "Build: ${env.BUILD_NUMBER}"
                    git push origin "${env.YAMLIT_LATEST_VERSION}"
                """
            }
        }
    }
}